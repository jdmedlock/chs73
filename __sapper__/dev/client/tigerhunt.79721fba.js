import { S as SvelteComponentDev, i as init, s as safe_not_equal, d as dispatch_dev, M as validate_each_argument, v as validate_slots, z as goto, e as element, t as text, c as claim_element, a as children, b as claim_text, f as detach_dev, h as attr_dev, j as add_location, k as insert_dev, l as append_dev, u as listen_dev, o as svg_element, n as space, A as create_component, p as claim_space, B as claim_component, q as set_style, C as mount_component, D as transition_in, E as transition_out, F as destroy_component, O as destroy_each } from './client.584768dc.js';
import { c as classmates } from './classmates.e9e85ada.js';
import { L as LetterIndex, B as BackToTop, c as createNameIndex } from './LetterIndex.59f67f78.js';
import { c as createPersonGroups } from './createPersonGroups.7c5a2af0.js';

/* src/routes/tigerhunt.svelte generated by Svelte v3.35.0 */
const file = "src/routes/tigerhunt.svelte";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[7] = list[i];
	return child_ctx;
}

// (80:10) {#each classmateColumn1 as classmate}
function create_each_block_1(ctx) {
	let li;
	let t_value = /*classmate*/ ctx[7].name + "";
	let t;
	let mounted;
	let dispose;

	function click_handler() {
		return /*click_handler*/ ctx[4](/*classmate*/ ctx[7]);
	}

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { id: true, class: true });
			var li_nodes = children(li);
			t = claim_text(li_nodes, t_value);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "id", /*classmate*/ ctx[7].name.toLowerCase().replace(/\s+/g, ""));
			attr_dev(li, "class", "mt-2 transition duration-300 ease-in-out hover:text-orange-500 hover:font-semibold hover:bg-gray-300 transform hover:-translate-y-0 hover:scale-110");
			add_location(li, file, 80, 12, 3123);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);

			if (!mounted) {
				dispose = listen_dev(li, "click", click_handler, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block_1.name,
		type: "each",
		source: "(80:10) {#each classmateColumn1 as classmate}",
		ctx
	});

	return block;
}

// (88:10) {#each classmateColumn2 as classmate}
function create_each_block(ctx) {
	let li;
	let t_value = /*classmate*/ ctx[7].name + "";
	let t;
	let mounted;
	let dispose;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[5](/*classmate*/ ctx[7]);
	}

	const block = {
		c: function create() {
			li = element("li");
			t = text(t_value);
			this.h();
		},
		l: function claim(nodes) {
			li = claim_element(nodes, "LI", { id: true, class: true });
			var li_nodes = children(li);
			t = claim_text(li_nodes, t_value);
			li_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(li, "id", /*classmate*/ ctx[7].name.toLowerCase().replace(/\s+/g, ""));
			attr_dev(li, "class", "mt-2 transition duration-300 ease-in-out hover:text-orange-500 hover:font-semibold hover:bg-gray-300 transform hover:-translate-y-0 hover:scale-110");
			add_location(li, file, 88, 12, 3635);
		},
		m: function mount(target, anchor) {
			insert_dev(target, li, anchor);
			append_dev(li, t);

			if (!mounted) {
				dispose = listen_dev(li, "click", click_handler_1, false, false, false);
				mounted = true;
			}
		},
		p: function update(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(li);
			mounted = false;
			dispose();
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_each_block.name,
		type: "each",
		source: "(88:10) {#each classmateColumn2 as classmate}",
		ctx
	});

	return block;
}

function create_fragment(ctx) {
	let section;
	let div0;
	let svg;
	let polygon;
	let t0;
	let div9;
	let div1;
	let h1;
	let t1;
	let t2;
	let div5;
	let div4;
	let div2;
	let picture;
	let img;
	let img_src_value;
	let t3;
	let div3;
	let p0;
	let t4;
	let t5;
	let div8;
	let div6;
	let p1;
	let em;
	let t6;
	let t7;
	let t8;
	let letterindex;
	let t9;
	let div7;
	let ul0;
	let t10;
	let ul1;
	let t11;
	let backtotop;
	let current;

	letterindex = new LetterIndex({
			props: {
				pageName: "tigerhunt",
				letterIndex: /*letterIndex*/ ctx[2]
			},
			$$inline: true
		});

	let each_value_1 = /*classmateColumn1*/ ctx[0];
	validate_each_argument(each_value_1);
	let each_blocks_1 = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks_1[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	let each_value = /*classmateColumn2*/ ctx[1];
	validate_each_argument(each_value);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	backtotop = new BackToTop({
			props: { back: "tigerhunt" },
			$$inline: true
		});

	const block = {
		c: function create() {
			section = element("section");
			div0 = element("div");
			svg = svg_element("svg");
			polygon = svg_element("polygon");
			t0 = space();
			div9 = element("div");
			div1 = element("div");
			h1 = element("h1");
			t1 = text("Tiger Hunt!");
			t2 = space();
			div5 = element("div");
			div4 = element("div");
			div2 = element("div");
			picture = element("picture");
			img = element("img");
			t3 = space();
			div3 = element("div");
			p0 = element("p");
			t4 = text("Tiger Hunt lets you help locate Classmates by providing up-to-date contact \n            information for people you are in contact with. Help us spread the\n            word about our 50th reunion.");
			t5 = space();
			div8 = element("div");
			div6 = element("div");
			p1 = element("p");
			em = element("em");
			t6 = text("Click");
			t7 = text(" on a name to see more.");
			t8 = space();
			create_component(letterindex.$$.fragment);
			t9 = space();
			div7 = element("div");
			ul0 = element("ul");

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].c();
			}

			t10 = space();
			ul1 = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t11 = space();
			create_component(backtotop.$$.fragment);
			this.h();
		},
		l: function claim(nodes) {
			section = claim_element(nodes, "SECTION", { id: true, class: true });
			var section_nodes = children(section);
			div0 = claim_element(section_nodes, "DIV", { class: true, style: true });
			var div0_nodes = children(div0);

			svg = claim_element(
				div0_nodes,
				"svg",
				{
					class: true,
					xmlns: true,
					preserveAspectRatio: true,
					version: true,
					viewBox: true,
					x: true,
					y: true
				},
				1
			);

			var svg_nodes = children(svg);
			polygon = claim_element(svg_nodes, "polygon", { class: true, points: true }, 1);
			children(polygon).forEach(detach_dev);
			svg_nodes.forEach(detach_dev);
			div0_nodes.forEach(detach_dev);
			t0 = claim_space(section_nodes);
			div9 = claim_element(section_nodes, "DIV", { class: true });
			var div9_nodes = children(div9);
			div1 = claim_element(div9_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			h1 = claim_element(div1_nodes, "H1", { class: true });
			var h1_nodes = children(h1);
			t1 = claim_text(h1_nodes, "Tiger Hunt!");
			h1_nodes.forEach(detach_dev);
			div1_nodes.forEach(detach_dev);
			t2 = claim_space(div9_nodes);
			div5 = claim_element(div9_nodes, "DIV", { class: true });
			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div2 = claim_element(div4_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			picture = claim_element(div2_nodes, "PICTURE", {});
			var picture_nodes = children(picture);
			img = claim_element(picture_nodes, "IMG", { alt: true, class: true, src: true });
			picture_nodes.forEach(detach_dev);
			div2_nodes.forEach(detach_dev);
			t3 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			p0 = claim_element(div3_nodes, "P", { class: true });
			var p0_nodes = children(p0);
			t4 = claim_text(p0_nodes, "Tiger Hunt lets you help locate Classmates by providing up-to-date contact \n            information for people you are in contact with. Help us spread the\n            word about our 50th reunion.");
			p0_nodes.forEach(detach_dev);
			div3_nodes.forEach(detach_dev);
			div4_nodes.forEach(detach_dev);
			div5_nodes.forEach(detach_dev);
			t5 = claim_space(div9_nodes);
			div8 = claim_element(div9_nodes, "DIV", { class: true });
			var div8_nodes = children(div8);
			div6 = claim_element(div8_nodes, "DIV", { class: true });
			var div6_nodes = children(div6);
			p1 = claim_element(div6_nodes, "P", {});
			var p1_nodes = children(p1);
			em = claim_element(p1_nodes, "EM", {});
			var em_nodes = children(em);
			t6 = claim_text(em_nodes, "Click");
			em_nodes.forEach(detach_dev);
			t7 = claim_text(p1_nodes, " on a name to see more.");
			p1_nodes.forEach(detach_dev);
			div6_nodes.forEach(detach_dev);
			t8 = claim_space(div8_nodes);
			claim_component(letterindex.$$.fragment, div8_nodes);
			t9 = claim_space(div8_nodes);
			div7 = claim_element(div8_nodes, "DIV", { class: true });
			var div7_nodes = children(div7);
			ul0 = claim_element(div7_nodes, "UL", { class: true });
			var ul0_nodes = children(ul0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].l(ul0_nodes);
			}

			ul0_nodes.forEach(detach_dev);
			t10 = claim_space(div7_nodes);
			ul1 = claim_element(div7_nodes, "UL", { class: true });
			var ul1_nodes = children(ul1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul1_nodes);
			}

			ul1_nodes.forEach(detach_dev);
			t11 = claim_space(div7_nodes);
			claim_component(backtotop.$$.fragment, div7_nodes);
			div7_nodes.forEach(detach_dev);
			div8_nodes.forEach(detach_dev);
			div9_nodes.forEach(detach_dev);
			section_nodes.forEach(detach_dev);
			this.h();
		},
		h: function hydrate() {
			attr_dev(polygon, "class", "text-white fill-current");
			attr_dev(polygon, "points", "2560 0 2560 100 0 100");
			add_location(polygon, file, 34, 6, 1283);
			attr_dev(svg, "class", "absolute bottom-0 overflow-hidden");
			attr_dev(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr_dev(svg, "preserveAspectRatio", "none");
			attr_dev(svg, "version", "1.1");
			attr_dev(svg, "viewBox", "0 0 2560 100");
			attr_dev(svg, "x", "0");
			attr_dev(svg, "y", "0");
			add_location(svg, file, 26, 4, 1076);
			attr_dev(div0, "class", "bottom-auto top-0 left-0 right-0 w-full absolute\n    pointer-events-none overflow-hidden -mt-20");
			set_style(div0, "height", "80px");
			add_location(div0, file, 22, 2, 932);
			attr_dev(h1, "class", "my-12 text-3xl md:text-5xl font-semibold");
			add_location(h1, file, 43, 6, 1564);
			attr_dev(div1, "class", "flex flex-col w-full justify-center text-center");
			add_location(div1, file, 42, 4, 1496);
			attr_dev(img, "alt", "TigerHunt");
			attr_dev(img, "class", "max-w-screen-sm lg:max-w-full h-20 md:h-28 lg:h-96 shadow-2xl\n                ml-0 md:ml-0 lg:ml-0 mb-8 lg:mb-none\n                transform scale-200 md:scale-150 lg:scale-100\n                shadow-xl-orange lg:shadow-2xl-orange");
			if (img.src !== (img_src_value = "chs_tigerhunt.jpeg")) attr_dev(img, "src", img_src_value);
			add_location(img, file, 50, 12, 1858);
			add_location(picture, file, 49, 10, 1836);
			attr_dev(div2, "class", "flex flex-wrap w-full m-4 p-0 justify-center");
			add_location(div2, file, 48, 8, 1767);
			attr_dev(p0, "class", "");
			add_location(p0, file, 61, 10, 2359);
			attr_dev(div3, "class", "flex flex-col w-full md:w-2/3 place-self-center text-center text-xl md:text-3xl text-gray-500");
			add_location(div3, file, 60, 8, 2241);
			attr_dev(div4, "class", "flex flex-col max-ww-full mb-4 content-start");
			add_location(div4, file, 47, 6, 1700);
			attr_dev(div5, "class", "flex justify-center w-full");
			add_location(div5, file, 46, 4, 1653);
			add_location(em, file, 72, 11, 2815);
			add_location(p1, file, 72, 8, 2812);
			attr_dev(div6, "class", "flex flex-wrap place-content-center w-full");
			add_location(div6, file, 71, 6, 2747);
			attr_dev(ul0, "class", "mt-2 text-md md:text-xl text-gray-600 leading-tight");
			add_location(ul0, file, 78, 8, 2998);
			attr_dev(ul1, "class", "ml-0 md:ml-6 mt-0 md:mt-2 text-lg md:text-xl text-gray-600 \n          leading-tight");
			add_location(ul1, file, 85, 8, 3478);
			attr_dev(div7, "class", "flex w-full justify-center");
			add_location(div7, file, 77, 6, 2949);
			attr_dev(div8, "class", "md:flex-row justify-center w-full lg:w-1/2 ml-1 p-4 border-gray-300 border-2 shadow-2xl");
			add_location(div8, file, 70, 4, 2639);
			attr_dev(div9, "class", "container flex flex-wrap justify-center w-full  lg:7/12 mx-auto lg:py-none px-4");
			add_location(div9, file, 40, 2, 1397);
			attr_dev(section, "id", "top");
			attr_dev(section, "class", "relative py-12 lg:py-20");
			add_location(section, file, 21, 0, 879);
		},
		m: function mount(target, anchor) {
			insert_dev(target, section, anchor);
			append_dev(section, div0);
			append_dev(div0, svg);
			append_dev(svg, polygon);
			append_dev(section, t0);
			append_dev(section, div9);
			append_dev(div9, div1);
			append_dev(div1, h1);
			append_dev(h1, t1);
			append_dev(div9, t2);
			append_dev(div9, div5);
			append_dev(div5, div4);
			append_dev(div4, div2);
			append_dev(div2, picture);
			append_dev(picture, img);
			append_dev(div4, t3);
			append_dev(div4, div3);
			append_dev(div3, p0);
			append_dev(p0, t4);
			append_dev(div9, t5);
			append_dev(div9, div8);
			append_dev(div8, div6);
			append_dev(div6, p1);
			append_dev(p1, em);
			append_dev(em, t6);
			append_dev(p1, t7);
			append_dev(div8, t8);
			mount_component(letterindex, div8, null);
			append_dev(div8, t9);
			append_dev(div8, div7);
			append_dev(div7, ul0);

			for (let i = 0; i < each_blocks_1.length; i += 1) {
				each_blocks_1[i].m(ul0, null);
			}

			append_dev(div7, t10);
			append_dev(div7, ul1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul1, null);
			}

			append_dev(div7, t11);
			mount_component(backtotop, div7, null);
			current = true;
		},
		p: function update(ctx, [dirty]) {
			if (dirty & /*classmateColumn1, handleTigerHunt*/ 9) {
				each_value_1 = /*classmateColumn1*/ ctx[0];
				validate_each_argument(each_value_1);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks_1[i]) {
						each_blocks_1[i].p(child_ctx, dirty);
					} else {
						each_blocks_1[i] = create_each_block_1(child_ctx);
						each_blocks_1[i].c();
						each_blocks_1[i].m(ul0, null);
					}
				}

				for (; i < each_blocks_1.length; i += 1) {
					each_blocks_1[i].d(1);
				}

				each_blocks_1.length = each_value_1.length;
			}

			if (dirty & /*classmateColumn2, handleTigerHunt*/ 10) {
				each_value = /*classmateColumn2*/ ctx[1];
				validate_each_argument(each_value);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul1, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i: function intro(local) {
			if (current) return;
			transition_in(letterindex.$$.fragment, local);
			transition_in(backtotop.$$.fragment, local);
			current = true;
		},
		o: function outro(local) {
			transition_out(letterindex.$$.fragment, local);
			transition_out(backtotop.$$.fragment, local);
			current = false;
		},
		d: function destroy(detaching) {
			if (detaching) detach_dev(section);
			destroy_component(letterindex);
			destroy_each(each_blocks_1, detaching);
			destroy_each(each_blocks, detaching);
			destroy_component(backtotop);
		}
	};

	dispatch_dev("SvelteRegisterBlock", {
		block,
		id: create_fragment.name,
		type: "component",
		source: "",
		ctx
	});

	return block;
}

function instance($$self, $$props, $$invalidate) {
	let { $$slots: slots = {}, $$scope } = $$props;
	validate_slots("Tigerhunt", slots, []);
	const unconfirmedClassmates = classmates.filter(classmate => classmate.confirmed === "FALSE");
	const [classmateColumn1, classmateColumn2] = createPersonGroups(unconfirmedClassmates);
	const letterIndex = createNameIndex(classmateColumn1.concat(classmateColumn2));

	const handleTigerHunt = async classmate => {
		await goto(`updatecontact?back=tigerhunt&name=${classmate.name}&photoId=${classmate.cloudinaryId}&deceased=${classmate.deceased}&confirmed=${classmate.confirmed}&type=classmate`);
	};

	const writable_props = [];

	Object.keys($$props).forEach(key => {
		if (!~writable_props.indexOf(key) && key.slice(0, 2) !== "$$") console.warn(`<Tigerhunt> was created with unknown prop '${key}'`);
	});

	const click_handler = classmate => handleTigerHunt(classmate);
	const click_handler_1 = classmate => handleTigerHunt(classmate);

	$$self.$capture_state = () => ({
		goto,
		classmates,
		createNameIndex,
		createPersonGroups,
		BackToTop,
		LetterIndex,
		unconfirmedClassmates,
		classmateColumn1,
		classmateColumn2,
		letterIndex,
		handleTigerHunt
	});

	return [
		classmateColumn1,
		classmateColumn2,
		letterIndex,
		handleTigerHunt,
		click_handler,
		click_handler_1
	];
}

class Tigerhunt extends SvelteComponentDev {
	constructor(options) {
		super(options);
		init(this, options, instance, create_fragment, safe_not_equal, {});

		dispatch_dev("SvelteRegisterComponent", {
			component: this,
			tagName: "Tigerhunt",
			options,
			id: create_fragment.name
		});
	}
}

export default Tigerhunt;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidGlnZXJodW50Ljc5NzIxZmJhLmpzIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvcm91dGVzL3RpZ2VyaHVudC5zdmVsdGUiXSwic291cmNlc0NvbnRlbnQiOlsiPHNjcmlwdD5cbiAgaW1wb3J0IHsgZ290byB9IGZyb20gJ0BzYXBwZXIvYXBwJ1xuICBpbXBvcnQgY2xhc3NtYXRlcyBmcm9tICcuLi9hc3NldHMvY2xhc3NtYXRlcy5qc29uJ1xuICBpbXBvcnQgY3JlYXRlTmFtZUluZGV4IGZyb20gJy4uL3V0aWxzL2NyZWF0ZU5hbWVJbmRleCdcbiAgaW1wb3J0IGNyZWF0ZVBlcnNvbkdyb3VwcyBmcm9tICcuLi91dGlscy9jcmVhdGVQZXJzb25Hcm91cHMnXG4gIGltcG9ydCBCYWNrVG9Ub3AgZnJvbSAnLi4vY29tcG9uZW50cy9CYWNrVG9Ub3Auc3ZlbHRlJ1xuICBpbXBvcnQgTGV0dGVySW5kZXggZnJvbSAnLi4vY29tcG9uZW50cy9MZXR0ZXJJbmRleC5zdmVsdGUnXG5cbiAgY29uc3QgdW5jb25maXJtZWRDbGFzc21hdGVzID0gY2xhc3NtYXRlcy5maWx0ZXIoY2xhc3NtYXRlID0+IGNsYXNzbWF0ZS5jb25maXJtZWQgPT09IFwiRkFMU0VcIilcblxuICBjb25zdCBbY2xhc3NtYXRlQ29sdW1uMSwgY2xhc3NtYXRlQ29sdW1uMl0gPSBjcmVhdGVQZXJzb25Hcm91cHModW5jb25maXJtZWRDbGFzc21hdGVzKVxuICBjb25zdCBsZXR0ZXJJbmRleCA9IGNyZWF0ZU5hbWVJbmRleChjbGFzc21hdGVDb2x1bW4xLmNvbmNhdChjbGFzc21hdGVDb2x1bW4yKSlcblxuICBjb25zdCBoYW5kbGVUaWdlckh1bnQgPSBhc3luYyAoY2xhc3NtYXRlKSA9PiB7XG4gICAgYXdhaXQgZ290byhgdXBkYXRlY29udGFjdD9iYWNrPXRpZ2VyaHVudCZuYW1lPSR7IGNsYXNzbWF0ZS5uYW1lIH0mcGhvdG9JZD0keyBjbGFzc21hdGUuY2xvdWRpbmFyeUlkIH0mZGVjZWFzZWQ9JHsgY2xhc3NtYXRlLmRlY2Vhc2VkIH0mY29uZmlybWVkPSR7IGNsYXNzbWF0ZS5jb25maXJtZWQgfSZ0eXBlPWNsYXNzbWF0ZWApXG4gIH1cbjwvc2NyaXB0PlxuXG48c3R5bGU+XG48L3N0eWxlPlxuXG48c2VjdGlvbiBpZD1cInRvcFwiIGNsYXNzPVwicmVsYXRpdmUgcHktMTIgbGc6cHktMjBcIj5cbiAgPGRpdlxuICAgIGNsYXNzPVwiYm90dG9tLWF1dG8gdG9wLTAgbGVmdC0wIHJpZ2h0LTAgdy1mdWxsIGFic29sdXRlXG4gICAgcG9pbnRlci1ldmVudHMtbm9uZSBvdmVyZmxvdy1oaWRkZW4gLW10LTIwXCJcbiAgICBzdHlsZT1cImhlaWdodDogODBweDtcIj5cbiAgICA8c3ZnXG4gICAgICBjbGFzcz1cImFic29sdXRlIGJvdHRvbS0wIG92ZXJmbG93LWhpZGRlblwiXG4gICAgICB4bWxucz1cImh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnXCJcbiAgICAgIHByZXNlcnZlQXNwZWN0UmF0aW89XCJub25lXCJcbiAgICAgIHZlcnNpb249XCIxLjFcIlxuICAgICAgdmlld0JveD1cIjAgMCAyNTYwIDEwMFwiXG4gICAgICB4PVwiMFwiXG4gICAgICB5PVwiMFwiPlxuICAgICAgPHBvbHlnb25cbiAgICAgICAgY2xhc3M9XCJ0ZXh0LXdoaXRlIGZpbGwtY3VycmVudFwiXG4gICAgICAgIHBvaW50cz1cIjI1NjAgMCAyNTYwIDEwMCAwIDEwMFwiIC8+XG4gICAgPC9zdmc+XG4gIDwvZGl2PlxuXG4gIDxkaXYgY2xhc3M9XCJjb250YWluZXIgZmxleCBmbGV4LXdyYXAganVzdGlmeS1jZW50ZXIgdy1mdWxsICBsZzo3LzEyIG14LWF1dG8gbGc6cHktbm9uZSBweC00XCI+XG5cbiAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LWNvbCB3LWZ1bGwganVzdGlmeS1jZW50ZXIgdGV4dC1jZW50ZXJcIj5cbiAgICAgIDxoMSBjbGFzcz1cIm15LTEyIHRleHQtM3hsIG1kOnRleHQtNXhsIGZvbnQtc2VtaWJvbGRcIj5UaWdlciBIdW50ITwvaDE+ICAgXG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwiZmxleCBqdXN0aWZ5LWNlbnRlciB3LWZ1bGxcIj5cbiAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtY29sIG1heC13dy1mdWxsIG1iLTQgY29udGVudC1zdGFydFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LXdyYXAgdy1mdWxsIG0tNCBwLTAganVzdGlmeS1jZW50ZXJcIj5cbiAgICAgICAgICA8cGljdHVyZT5cbiAgICAgICAgICAgIDxpbWdcbiAgICAgICAgICAgICAgYWx0PVwiVGlnZXJIdW50XCJcbiAgICAgICAgICAgICAgY2xhc3M9XCJtYXgtdy1zY3JlZW4tc20gbGc6bWF4LXctZnVsbCBoLTIwIG1kOmgtMjggbGc6aC05NiBzaGFkb3ctMnhsXG4gICAgICAgICAgICAgICAgbWwtMCBtZDptbC0wIGxnOm1sLTAgbWItOCBsZzptYi1ub25lXG4gICAgICAgICAgICAgICAgdHJhbnNmb3JtIHNjYWxlLTIwMCBtZDpzY2FsZS0xNTAgbGc6c2NhbGUtMTAwXG4gICAgICAgICAgICAgICAgc2hhZG93LXhsLW9yYW5nZSBsZzpzaGFkb3ctMnhsLW9yYW5nZVwiXG4gICAgICAgICAgICAgIHNyYz1cImNoc190aWdlcmh1bnQuanBlZ1wiIC8+XG4gICAgICAgICAgPC9waWN0dXJlPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgXG4gICAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IGZsZXgtY29sIHctZnVsbCBtZDp3LTIvMyBwbGFjZS1zZWxmLWNlbnRlciB0ZXh0LWNlbnRlciB0ZXh0LXhsIG1kOnRleHQtM3hsIHRleHQtZ3JheS01MDBcIj5cbiAgICAgICAgICA8cCBjbGFzcz1cIlwiPlxuICAgICAgICAgICAgVGlnZXIgSHVudCBsZXRzIHlvdSBoZWxwIGxvY2F0ZSBDbGFzc21hdGVzIGJ5IHByb3ZpZGluZyB1cC10by1kYXRlIGNvbnRhY3QgXG4gICAgICAgICAgICBpbmZvcm1hdGlvbiBmb3IgcGVvcGxlIHlvdSBhcmUgaW4gY29udGFjdCB3aXRoLiBIZWxwIHVzIHNwcmVhZCB0aGVcbiAgICAgICAgICAgIHdvcmQgYWJvdXQgb3VyIDUwdGggcmV1bmlvbi5cbiAgICAgICAgICA8L3A+XG4gICAgICAgIDwvZGl2PlxuICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG5cbiAgICA8ZGl2IGNsYXNzPVwibWQ6ZmxleC1yb3cganVzdGlmeS1jZW50ZXIgdy1mdWxsIGxnOnctMS8yIG1sLTEgcC00IGJvcmRlci1ncmF5LTMwMCBib3JkZXItMiBzaGFkb3ctMnhsXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiZmxleCBmbGV4LXdyYXAgcGxhY2UtY29udGVudC1jZW50ZXIgdy1mdWxsXCI+XG4gICAgICAgIDxwPjxlbT5DbGljazwvZW0+IG9uIGEgbmFtZSB0byBzZWUgbW9yZS48L3A+XG4gICAgICA8L2Rpdj5cblxuICAgICAgPExldHRlckluZGV4IHBhZ2VOYW1lPVwidGlnZXJodW50XCIgbGV0dGVySW5kZXg9eyBsZXR0ZXJJbmRleCB9IC8+XG5cbiAgICAgIDxkaXYgY2xhc3M9XCJmbGV4IHctZnVsbCBqdXN0aWZ5LWNlbnRlclwiPlxuICAgICAgICA8dWwgY2xhc3M9XCJtdC0yIHRleHQtbWQgbWQ6dGV4dC14bCB0ZXh0LWdyYXktNjAwIGxlYWRpbmctdGlnaHRcIj5cbiAgICAgICAgICB7I2VhY2ggY2xhc3NtYXRlQ29sdW1uMSBhcyBjbGFzc21hdGV9XG4gICAgICAgICAgICA8bGkgaWQ9XCJ7IGNsYXNzbWF0ZS5uYW1lLnRvTG93ZXJDYXNlKCkucmVwbGFjZSgvXFxzKy9nLCAnJykgfVwiXG4gICAgICAgICAgICAgIGNsYXNzPVwibXQtMiB0cmFuc2l0aW9uIGR1cmF0aW9uLTMwMCBlYXNlLWluLW91dCBob3Zlcjp0ZXh0LW9yYW5nZS01MDAgaG92ZXI6Zm9udC1zZW1pYm9sZCBob3ZlcjpiZy1ncmF5LTMwMCB0cmFuc2Zvcm0gaG92ZXI6LXRyYW5zbGF0ZS15LTAgaG92ZXI6c2NhbGUtMTEwXCJcbiAgICAgICAgICAgICAgb246Y2xpY2s9eygpID0+IGhhbmRsZVRpZ2VySHVudChjbGFzc21hdGUpIH0+eyBjbGFzc21hdGUubmFtZSB9PC9saT5cbiAgICAgICAgICB7L2VhY2h9XG4gICAgICAgIDwvdWw+XG4gICAgICAgIDx1bCBjbGFzcz1cIm1sLTAgbWQ6bWwtNiBtdC0wIG1kOm10LTIgdGV4dC1sZyBtZDp0ZXh0LXhsIHRleHQtZ3JheS02MDAgXG4gICAgICAgICAgbGVhZGluZy10aWdodFwiPlxuICAgICAgICAgIHsjZWFjaCBjbGFzc21hdGVDb2x1bW4yIGFzIGNsYXNzbWF0ZX1cbiAgICAgICAgICAgIDxsaSBpZD1cInsgY2xhc3NtYXRlLm5hbWUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9cXHMrL2csICcnKSB9XCJcbiAgICAgICAgICAgICAgY2xhc3M9XCJtdC0yIHRyYW5zaXRpb24gZHVyYXRpb24tMzAwIGVhc2UtaW4tb3V0IGhvdmVyOnRleHQtb3JhbmdlLTUwMCBob3Zlcjpmb250LXNlbWlib2xkIGhvdmVyOmJnLWdyYXktMzAwIHRyYW5zZm9ybSBob3ZlcjotdHJhbnNsYXRlLXktMCBob3ZlcjpzY2FsZS0xMTBcIlxuICAgICAgICAgICAgICBvbjpjbGljaz17KCkgPT4gaGFuZGxlVGlnZXJIdW50KGNsYXNzbWF0ZSkgfT57IGNsYXNzbWF0ZS5uYW1lIH08L2xpPlxuICAgICAgICAgIHsvZWFjaH1cbiAgICAgICAgPC91bD5cblxuICAgICAgICA8QmFja1RvVG9wIGJhY2s9XCJ0aWdlcmh1bnRcIi8+XG4gICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgPC9kaXY+XG48L3NlY3Rpb24+Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzZCQWtGNkQsR0FBUyxJQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29DQUZyRCxHQUFTLElBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7NkJBVVIsR0FBUyxJQUFDLElBQUk7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O29DQUZyRCxHQUFTLElBQUMsSUFBSSxDQUFDLFdBQVcsR0FBRyxPQUFPLENBQUMsTUFBTSxFQUFFLEVBQUU7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7aUNBYmYsR0FBVzs7Ozs7eUNBSWhELEdBQWdCOzs7O2tDQUFyQixNQUFJOzs7O3VDQVFDLEdBQWdCOzs7O2dDQUFyQixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O3dDQVJDLEdBQWdCOzs7O2lDQUFyQixNQUFJOzs7Ozs7Ozs7Ozs7Ozs7O3dDQUFKLE1BQUk7Ozs7c0NBUUMsR0FBZ0I7Ozs7K0JBQXJCLE1BQUk7Ozs7Ozs7Ozs7Ozs7Ozs7b0NBQUosTUFBSTs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztPQS9FUixxQkFBcUIsR0FBRyxVQUFVLENBQUMsTUFBTSxDQUFDLFNBQVMsSUFBSSxTQUFTLENBQUMsU0FBUyxLQUFLLE9BQU87UUFFckYsZ0JBQWdCLEVBQUUsZ0JBQWdCLElBQUksa0JBQWtCLENBQUMscUJBQXFCO09BQy9FLFdBQVcsR0FBRyxlQUFlLENBQUMsZ0JBQWdCLENBQUMsTUFBTSxDQUFDLGdCQUFnQjs7T0FFdEUsZUFBZSxTQUFVLFNBQVM7UUFDaEMsSUFBSSxzQ0FBdUMsU0FBUyxDQUFDLElBQUksWUFBYyxTQUFTLENBQUMsWUFBWSxhQUFlLFNBQVMsQ0FBQyxRQUFRLGNBQWdCLFNBQVMsQ0FBQyxTQUFTOzs7Ozs7Ozs7b0NBb0U3SSxlQUFlLENBQUMsU0FBUztzQ0FRekIsZUFBZSxDQUFDLFNBQVM7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OzsifQ==
