const BE_URL = "http://localhost:3100" ;

const client = (fetcher) => {
  return {
    async request({ query, variables }) {
      const body = JSON.stringify({
        query,
        variables: variables ? variables : {},
      });
  
      const response = await fetcher(`${BE_URL}/graphql`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body,
      });
  
      const result = await response.json();
      if (response.ok && !result.errors) {
        return result.data
      } else {
        console.error(
          new Error(
            `[GraphQL Error]: Failed to make the request: ${JSON.stringify(
              result
            )}`
          )
        );
        throw new Error(`[GraphQL Error]: ${JSON.stringify(result)}`)
      }
    },
  }
};

const emailValidator = (value) => {
  const regex = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
  return regex.test(value) || 'Please enter a valid email'
};

const nameValidator = (value) => {
  const regex = /^([a-zA-Z]{2,}\s[a-zA-Z]{1,}'?-?[a-zA-Z]{2,}\s?([a-zA-Z]{1,})?)/;
  return regex.test(value) || 'Please enter your first & last name'
};

const stateValidator = (value) => {
  const regex = /^(([Aa][EeLlKkSsZzRr])|([Cc][AaOoTt])|([Dd][EeCc])|([Ff][MmLl])|([Gg][AaUu])|([Hh][Ii])|([Ii][DdLlNnAa])|([Kk][SsYy])|([Ll][Aa])|([Mm][EeHhDdAaIiNnSsOoTt])|([Nn][EeVvHhJjMmYyCcDd])|([Mm][Pp])|([Oo][HhKkRr])|([Pp][WwAaRr])|([Rr][Ii])|([Ss][CcDd])|([Tt][NnXx])|([Uu][Tt])|([Vv][TtIiAa])|([Ww][AaVvIiYy]))$/;

  return regex.test(value) || 'Please enter a valid U.S. state abbreviation'
};

const zipcodeValidator = (value) => {
  const regex = /^[0-9]{5}(?:-[0-9]{4})?$/;
  return regex.test(value) || 'Please enter a valid U.S. zip code'
};

export { client as c, emailValidator as e, nameValidator as n, stateValidator as s, zipcodeValidator as z };
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9ycy5iMTNiZmYwYi5qcyIsInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL3V0aWxzL2dyYXBocWwuanMiLCIuLi8uLi8uLi9zcmMvdXRpbHMvdmFsaWRhdG9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJjb25zdCBCRV9VUkwgPSBwcm9jZXNzLmVudi5CRV9VUkwgfHwgJydcblxuZXhwb3J0IGNvbnN0IGNsaWVudCA9IChmZXRjaGVyKSA9PiB7XG4gIHJldHVybiB7XG4gICAgYXN5bmMgcmVxdWVzdCh7IHF1ZXJ5LCB2YXJpYWJsZXMgfSkge1xuICAgICAgY29uc3QgYm9keSA9IEpTT04uc3RyaW5naWZ5KHtcbiAgICAgICAgcXVlcnksXG4gICAgICAgIHZhcmlhYmxlczogdmFyaWFibGVzID8gdmFyaWFibGVzIDoge30sXG4gICAgICB9KVxuICBcbiAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2hlcihgJHtCRV9VUkx9L2dyYXBocWxgLCB7XG4gICAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICAgIGhlYWRlcnM6IHtcbiAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiBcImFwcGxpY2F0aW9uL2pzb25cIixcbiAgICAgICAgfSxcbiAgICAgICAgYm9keSxcbiAgICAgIH0pXG4gIFxuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcmVzcG9uc2UuanNvbigpXG4gICAgICBpZiAocmVzcG9uc2Uub2sgJiYgIXJlc3VsdC5lcnJvcnMpIHtcbiAgICAgICAgcmV0dXJuIHJlc3VsdC5kYXRhXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmVycm9yKFxuICAgICAgICAgIG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBbR3JhcGhRTCBFcnJvcl06IEZhaWxlZCB0byBtYWtlIHRoZSByZXF1ZXN0OiAke0pTT04uc3RyaW5naWZ5KFxuICAgICAgICAgICAgICByZXN1bHRcbiAgICAgICAgICAgICl9YFxuICAgICAgICAgIClcbiAgICAgICAgKTtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBbR3JhcGhRTCBFcnJvcl06ICR7SlNPTi5zdHJpbmdpZnkocmVzdWx0KX1gKVxuICAgICAgfVxuICAgIH0sXG4gIH1cbn1cbiIsImNvbnN0IGVtYWlsVmFsaWRhdG9yID0gKHZhbHVlKSA9PiB7XG4gIGNvbnN0IHJlZ2V4ID0gL14oKFtePD4oKVtcXF1cXFxcLiw7Olxcc0BcIl0rKFxcLltePD4oKVtcXF1cXFxcLiw7Olxcc0BcIl0rKSopfChcIi4rXCIpKUAoKFxcW1swLTldezEsM31cXC5bMC05XXsxLDN9XFwuWzAtOV17MSwzfVxcLlswLTldezEsM31dKXwoKFthLXpBLVpcXC0wLTldK1xcLikrW2EtekEtWl17Mix9KSkkL1xuICByZXR1cm4gcmVnZXgudGVzdCh2YWx1ZSkgfHwgJ1BsZWFzZSBlbnRlciBhIHZhbGlkIGVtYWlsJ1xufVxuXG5jb25zdCBuYW1lVmFsaWRhdG9yID0gKHZhbHVlKSA9PiB7XG4gIGNvbnN0IHJlZ2V4ID0gL14oW2EtekEtWl17Mix9XFxzW2EtekEtWl17MSx9Jz8tP1thLXpBLVpdezIsfVxccz8oW2EtekEtWl17MSx9KT8pL1xuICByZXR1cm4gcmVnZXgudGVzdCh2YWx1ZSkgfHwgJ1BsZWFzZSBlbnRlciB5b3VyIGZpcnN0ICYgbGFzdCBuYW1lJ1xufVxuXG5jb25zdCByZXF1aXJlZFZhbGlkYXRvciA9ICgpID0+IHtcbiAgcmV0dXJuICh2YWx1ZSAhPT0gdW5kZWZpbmVkICYmIHZhbHVlICE9PSBudWxsICYmIHZhbHVlICE9PSAnJykgfHwgJ1RoaXMgZmllbGQgaXMgcmVxdWlyZWQnXG59XG5cbmNvbnN0IHN0YXRlVmFsaWRhdG9yID0gKHZhbHVlKSA9PiB7XG4gIGNvbnN0IHJlZ2V4ID0gL14oKFtBYV1bRWVMbEtrU3NaelJyXSl8KFtDY11bQWFPb1R0XSl8KFtEZF1bRWVDY10pfChbRmZdW01tTGxdKXwoW0dnXVtBYVV1XSl8KFtIaF1bSWldKXwoW0lpXVtEZExsTm5BYV0pfChbS2tdW1NzWXldKXwoW0xsXVtBYV0pfChbTW1dW0VlSGhEZEFhSWlOblNzT29UdF0pfChbTm5dW0VlVnZIaEpqTW1ZeUNjRGRdKXwoW01tXVtQcF0pfChbT29dW0hoS2tScl0pfChbUHBdW1d3QWFScl0pfChbUnJdW0lpXSl8KFtTc11bQ2NEZF0pfChbVHRdW05uWHhdKXwoW1V1XVtUdF0pfChbVnZdW1R0SWlBYV0pfChbV3ddW0FhVnZJaVl5XSkpJC9cblxuICByZXR1cm4gcmVnZXgudGVzdCh2YWx1ZSkgfHwgJ1BsZWFzZSBlbnRlciBhIHZhbGlkIFUuUy4gc3RhdGUgYWJicmV2aWF0aW9uJ1xufVxuXG5jb25zdCB6aXBjb2RlVmFsaWRhdG9yID0gKHZhbHVlKSA9PiB7XG4gIGNvbnN0IHJlZ2V4ID0gL15bMC05XXs1fSg/Oi1bMC05XXs0fSk/JC9cbiAgcmV0dXJuIHJlZ2V4LnRlc3QodmFsdWUpIHx8ICdQbGVhc2UgZW50ZXIgYSB2YWxpZCBVLlMuIHppcCBjb2RlJ1xufVxuXG5leHBvcnQge1xuICBlbWFpbFZhbGlkYXRvcixcbiAgbmFtZVZhbGlkYXRvcixcbiAgc3RhdGVWYWxpZGF0b3IsXG4gIHppcGNvZGVWYWxpZGF0b3IsXG4gIHJlcXVpcmVkVmFsaWRhdG9yXG59XG4iXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsTUFBTSxNQUFNLEdBQUcsdUJBQWtCLEVBQU07QUFDdkM7QUFDWSxNQUFDLE1BQU0sR0FBRyxDQUFDLE9BQU8sS0FBSztBQUNuQyxFQUFFLE9BQU87QUFDVCxJQUFJLE1BQU0sT0FBTyxDQUFDLEVBQUUsS0FBSyxFQUFFLFNBQVMsRUFBRSxFQUFFO0FBQ3hDLE1BQU0sTUFBTSxJQUFJLEdBQUcsSUFBSSxDQUFDLFNBQVMsQ0FBQztBQUNsQyxRQUFRLEtBQUs7QUFDYixRQUFRLFNBQVMsRUFBRSxTQUFTLEdBQUcsU0FBUyxHQUFHLEVBQUU7QUFDN0MsT0FBTyxFQUFDO0FBQ1I7QUFDQSxNQUFNLE1BQU0sUUFBUSxHQUFHLE1BQU0sT0FBTyxDQUFDLENBQUMsRUFBRSxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUU7QUFDMUQsUUFBUSxNQUFNLEVBQUUsTUFBTTtBQUN0QixRQUFRLE9BQU8sRUFBRTtBQUNqQixVQUFVLGNBQWMsRUFBRSxrQkFBa0I7QUFDNUMsU0FBUztBQUNULFFBQVEsSUFBSTtBQUNaLE9BQU8sRUFBQztBQUNSO0FBQ0EsTUFBTSxNQUFNLE1BQU0sR0FBRyxNQUFNLFFBQVEsQ0FBQyxJQUFJLEdBQUU7QUFDMUMsTUFBTSxJQUFJLFFBQVEsQ0FBQyxFQUFFLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQ3pDLFFBQVEsT0FBTyxNQUFNLENBQUMsSUFBSTtBQUMxQixPQUFPLE1BQU07QUFDYixRQUFRLE9BQU8sQ0FBQyxLQUFLO0FBQ3JCLFVBQVUsSUFBSSxLQUFLO0FBQ25CLFlBQVksQ0FBQyw2Q0FBNkMsRUFBRSxJQUFJLENBQUMsU0FBUztBQUMxRSxjQUFjLE1BQU07QUFDcEIsYUFBYSxDQUFDLENBQUM7QUFDZixXQUFXO0FBQ1gsU0FBUyxDQUFDO0FBQ1YsUUFBUSxNQUFNLElBQUksS0FBSyxDQUFDLENBQUMsaUJBQWlCLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDckUsT0FBTztBQUNQLEtBQUs7QUFDTCxHQUFHO0FBQ0g7O0FDakNLLE1BQUMsY0FBYyxHQUFHLENBQUMsS0FBSyxLQUFLO0FBQ2xDLEVBQUUsTUFBTSxLQUFLLEdBQUcsdUpBQXNKO0FBQ3RLLEVBQUUsT0FBTyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLDRCQUE0QjtBQUMxRCxFQUFDO0FBQ0Q7QUFDSyxNQUFDLGFBQWEsR0FBRyxDQUFDLEtBQUssS0FBSztBQUNqQyxFQUFFLE1BQU0sS0FBSyxHQUFHLGtFQUFpRTtBQUNqRixFQUFFLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxxQ0FBcUM7QUFDbkUsRUFBQztBQUtEO0FBQ0ssTUFBQyxjQUFjLEdBQUcsQ0FBQyxLQUFLLEtBQUs7QUFDbEMsRUFBRSxNQUFNLEtBQUssR0FBRyxrVEFBaVQ7QUFDalU7QUFDQSxFQUFFLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSw4Q0FBOEM7QUFDNUUsRUFBQztBQUNEO0FBQ0ssTUFBQyxnQkFBZ0IsR0FBRyxDQUFDLEtBQUssS0FBSztBQUNwQyxFQUFFLE1BQU0sS0FBSyxHQUFHLDJCQUEwQjtBQUMxQyxFQUFFLE9BQU8sS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxvQ0FBb0M7QUFDbEU7Ozs7In0=
